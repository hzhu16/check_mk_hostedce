#!/usr/bin/env python
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import argparse
import sys
import htcondor

# Nagios exit status
STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

def main():
    args = parse_args()
    states = [STATE_OK]
    messages = []
    jobs = []

    job_attrs = [
        'JobStatus',
        'ServerTime',
        'EnteredCurrentStatus',
        'GridJobStatus',
        'GridJobId',
        'HoldReasonCode',
    ]

    try:
        coll = htcondor.Collector(args.collector)
        schedd_ad = coll.locate(htcondor.DaemonTypes.Schedd)
        schedd = htcondor.Schedd(schedd_ad)
        jobs = schedd.xquery(requirements='RoutedJob == TRUE', projection=job_attrs)
    except IOError as e:
        # Connection failed
        states.append(STATE_CRITICAL)
        messages.append(str(e) + " " +args.collector + " failed.")
    except Exception as e:
        # Other error
        states.append(STATE_UNKNOWN)
        messages.append(str(e) + " " + args.collector+ " failed.")

    stats = {
        'held': 0,
        'idle': 0,
        'idle_long': 0,
        'running': 0,
    }

    # Check for held job
    for job in jobs:
        if 'JobStatus' in job:
            if job['JobStatus'] == 1:
                stats['idle'] += 1
                continue
            if job['JobStatus'] == 2:
                stats['running'] += 1
                continue
            if job['JobStatus'] == 5 and job.get('HoldReasonCode', None) != 16:
                stats['held'] += 1
                continue

        # Has the routed job been idle for longer than 10 minutes, ie not submitted
        if job['JobStatus'] == 1 and (job['ServerTime'] - job['EnteredCurrentStatus']) > 60*10 and 'GridJobStatus' not in job:
            stats['idle_long'] += 1
            continue

        # Check for grid job id
        if 'GridJobId' in job:
            # Check for remote
            gridJobId = job['GridJobId']
            try:
                remote_id = gridJobId.split(" ")[-1:]
            except:
                pass

    if jobs:
        messages.append("{} running, {} idle, {} held jobs".format(stats['running'], stats['idle'], stats['held']))

    if stats['held'] > 0:
        #get hostname
        hostname = args.collector.split(":")[0]
        #get held job threshold
        try:
            gfactory = htcondor.Collector("gfactory-2.opensciencegrid.org")
            query_const = 'MyType=?="glidefactory" && GLIDEIN_Gatekeeper=?="' + hostname + ' ' + args.collector +'"'
        #print(query_const)
            entry = gfactory.query(htcondor.AdTypes.Any, query_const, ['GlideinConfigPerEntryMaxHeld'])
        except:
            messages.append(" Entry not found in gfactory")
            #print (messages)
            states.append(STATE_WARNING)
        #print(entry)
        if len(entry) == 1:
            maxheld = entry[0]['GlideinConfigPerEntryMaxHeld']
            #print(maxheld)
            if maxheld:
                if isinstance(maxheld, (int,long,float)): #maxheld must be a number
                    if stats['held'] > maxheld:
                        messages.append(" held jobs exceed GlideinConfigPerEntryMaxHeld (" + str(maxheld) +")")
                        #print (messages)
                        states.append(STATE_CRITICAL)
                else:
                    messages.append(" GlideinConfigPerEntryMaxHeld not valid")
                    #print (messages)
                    states.append(STATE_WARNING)
            else:
                messages.append(" GlideinConfigPerEntryMaxHeld not configured")
                states.append(STATE_WARNING)
        elif len(entry) > 1:
                messages.append(" Multiple entries found in gfactory")
                #print (messages)
                states.append(STATE_WARNING)

    if stats['idle_long'] > 0:
        messages.append("{} Long idle Job".format(stats['idle_long']))
        states.append(STATE_CRITICAL)

    state = max(states)
    message = ', '.join(messages)

    perf_data = ' |running=%(running)d idle=%(idle)d held=%(held)d' % stats

    if not message:
        message = 'OK'

    print(message + perf_data)
    sys.exit(state)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('collector')
    return parser.parse_args()

if __name__ == "__main__":
    # Run script as main
    main()
